#!/bin/bash

# Simple wrapper to call kiwi properly for image builds
# Author: Neal Gompa <ngompa@fedoraproject.org>

set -eu -o pipefail

kiwibuildsh="$(basename "$0")"

usage() {
	echo >&2 "usage: $kiwibuildsh [--kiwi-description-dir=DIR] [--show] [--obs-source] [--isolated] [--output-dir=DIR] --image-type=TYPE --image-profile=PROFILE [--debug]"
	echo >&2 "   eg: $kiwibuildsh --kiwi-description-dir=/var/tmp/desc --output-dir=/var/tmp/work --image-type=oem --image-profile=Cloud-Base-Generic --debug"
	echo >&2 "   eg: $kiwibuildsh --output-dir=/var/tmp/work --image-type=oem --image-profile=Cloud-Base-Generic"
	echo >&2 "   eg: $kiwibuildsh --isolated --output-dir=/var/tmp/work --image-type=oem --image-profile=Cloud-Base-Generic"
    echo >&2 "   eg: $kiwibuildsh --show --image-profile=Cloud-Base-Generic"
    echo >&2 "   eg: $kiwibuildsh --obs-source --output-dir=/var/tmp/work --image-type=oem --image-profile=Cloud-Base-AmazonEC2,Cloud-Base-GCE,Cloud-Base-Azure"
	exit 255
}

optTemp=$(getopt --options '+k:,s,O,i,o:,t:,p:,d,h' --longoptions 'show,obs-source,isolated,kiwi-description-dir:,output-dir:,image-type:,image-profile:,debug,help' --name "$kiwibuildsh" -- "$@")
eval set -- "$optTemp"
unset optTemp

create_obs_source=
kiwi_show_description=
kiwi_isolated=
kiwi_description_dir=$(pwd)
output_dir=
image_type=
image_profile=
debug=

while true; do
	case "$1" in
        -O|--obs-source) create_obs_source=1; shift ;;
        -s|--show) kiwi_show_description=1; shift ;;
		-i|--isolated) kiwi_isolated=1; shift ;;
		-k|--kiwi-description-dir) kiwi_description_dir="$2" ; shift 2 ;;
		-o|--output-dir) output_dir="$2" ; shift 2 ;;
		-t|--image-type) image_type="$2" ; shift 2 ;;
		-p|--image-profile) image_profile="$2" ; shift 2 ;;
		-d|--debug) debug="--debug" ; shift ;;
		-h|--help) usage ;;
		--) shift ; break ;;
	esac
done

if [ ! ${kiwi_show_description} ] && [ -z "$output_dir" ] || [ -z "$image_type" ] || [ -z "$image_profile" ]; then
	echo "Options not set!"
	usage
fi

if [ "${create_obs_source}" ]; then
	mkdir -p "${output_dir}"
	cp config.sh "${output_dir}"
	pushd repositories
	ln -sf core-obs.xml core.xml
	popd
	kiwi_profiles=$(for i in $(echo "${image_profile}" | tr , " ");do echo -n "--profile $i ";done)
	# shellcheck disable=SC2086
	kiwi-ng --type="${image_type}" ${kiwi_profiles} \
		image info --description "${kiwi_description_dir}" --print-xml \
			| grep ^\<image -A 100000 > "${output_dir}/appliance.kiwi"
	pushd repositories
	ln -sf core-tumbleweed.xml core.xml
	popd
	xsltproc xsl/master.xsl "${output_dir}/appliance.kiwi" > "${output_dir}/appliance.kiwi.obs"
	cat > "${output_dir}/appliance.kiwi" <<-EOF
		<?xml version="1.0" encoding="utf-8"?>
		<!-- Autogenerated Image Description, find sources at: https://code.opensuse.org/project/kiwi-descriptions -->
		<!-- The line below is required in order to use the multibuild OBS features -->
		<!-- OBS-Profiles: @BUILD_FLAVOR@ -->
	EOF
	grep -v ^\<\?xml >> "${output_dir}/appliance.kiwi" "${output_dir}/appliance.kiwi.obs"
	echo "<multibuild>" > "${output_dir}/_multibuild"
	for profile in $(echo "${image_profile}" | tr , " ");do
		echo "    <flavor>${profile}</flavor>" >> "${output_dir}/_multibuild"
	done
	echo "</multibuild>" >> "${output_dir}/_multibuild"
	rm -f "${output_dir}/appliance.kiwi.obs"
	exit $?
fi

if [ ${kiwi_show_description} ]; then
	kiwi-ng --type="${image_type}" --profile="${image_profile}" image info --description "${kiwi_description_dir}" --print-xml
	exit $?
fi

if [ ! ${kiwi_isolated} ] && [ -e "/sys/fs/selinux/enforce" ]; then
	# Disable SELinux enforcement during the image build if it's enforcing
	selinux_enforcing="$(cat /sys/fs/selinux/enforce)"
	if [ "$selinux_enforcing" = "1" ]; then
		setenforce 0
	fi
fi

set +e
if [ ! ${kiwi_isolated} ]; then
kiwi-ng ${debug} --type="${image_type}" --profile="${image_profile}" --color-output system build --description "${kiwi_description_dir}" --target-dir "${output_dir}"
else
kiwi-ng ${debug} --type="${image_type}" --profile="${image_profile}" --color-output system boxbuild --box tumbleweed --sshfs-sharing -- --description "${kiwi_description_dir}" --target-dir "${output_dir}"
fi
kiwi_status=$?
set -e

if [ ! ${kiwi_isolated} ] && [ -e "/sys/fs/selinux/enforce" ]; then
	# Re-enable SELinux enforcement now that image build is done
	if [ "$selinux_enforcing" = "1" ]; then
		setenforce 1
	fi
fi

exit $kiwi_status
